#!/usr/bin/env ruby
require 'timeout'
require 'open3'
require 'thread'
require 'socket'
require "securerandom"
require "ipaddr"
require 'find'
require 'yaml'
require 'logger'

logger = Logger.new(STDOUT)
logger.level = Logger::INFO

Thread.abort_on_exception = true
trap 'INT'  do shutdown end
trap 'TERM' do shutdown end


class Mesos
  attr_reader :mesos_master_ip, :mesos_master_port

  def initialize(args, logger = Logger.new(STDOUT))
    @args = args
    @logger = logger

    if master_ip = @args.select {|arg| arg.start_with?('--ip')}.first
      @mesos_master_ip = master_ip.split('=', 2)[1]
    end

    if master_port = @args.select {|arg| arg.start_with?('--port')}.first
      @mesos_master_port = master_port.split('=', 2)[1]
    else
      @mesos_master_port = 5050
    end
  end

  def setup
    @mesos_master, @mesos_slave = find_mesos

    @mesos_master_ip = outgoing_ip if @mesos_master_ip.nil?

    @mesos_master_args = filter_args(@args, valid_args(@mesos_master), {'--log_dir' => '/tmp', '--work_dir' => '/tmp', '--ip' => @mesos_master_ip, '--port' => @mesos_master_port})
    @mesos_slave_args = filter_args(@args, valid_args(@mesos_slave), {'--log_dir' => '/tmp', '--work_dir' => '/tmp'})    
  end

  def find_mesos
    mesos_dirs = [*Dir.glob('/usr/local/Cellar/mesos/*/sbin'), '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', File.expand_path('~'), '/usr', '/home', '/Users', '/']
    mesos_master, mesos_slave = nil

    @logger.info "looking for mesos master and slave executables on the local system"
    Find.find(*mesos_dirs.select {|p| FileTest.directory?(p)}) do |path|
      if File.executable?(path) && path.end_with?('mesos-master')
        @logger.info "found master executable #{path}"
        mesos_master = path
      elsif File.executable?(path) && path.end_with?('mesos-slave')
        @logger.info "found slave executable #{path}"
        mesos_slave = path
      end

      return mesos_master, mesos_slave if mesos_master && mesos_slave
    end

    raise "could not find mesos binaries"
  end

  def valid_args(cmd)
    args = []
    Open3.popen3(cmd, '--help') do |stdin, stdout, stderr, wait_thr|
      stdin.close
      lines = stderr.read.lines.map(&:chomp)
      lines.each do |line|
        if match = /^\s*--(?<arg>[^\s]+)/.match(line)
          arg = match[:arg]
          @logger.debug "#{cmd} supports #{arg}"
          arg.slice!(/=VALUE$/)
          if arg.slice!(/^\[no-\]/)
            args << "no-#{arg}"
          end
          args << arg
        end
      end
      stdout.close
      stderr.close
      wait_thr.join
    end

    args
  end

  def filter_args(args, valid_args, default_args)
    options = {}
    args.each do |arg|
      if arg.start_with?('--')
        k, v = arg.split('=', 2)
        options[k] = v if valid_args.include?(k[2..-1])
      end
    end
    options = default_args.merge(options)
    flags = options.select {|k, v| v.nil?}.keys + options.delete_if {|k, v| v.nil?}.collect { |k, v| "#{k}=#{v}" }

    flags
  end

  def outgoing_ip
    s = UDPSocket.new
    s.connect('8.8.8.8', 53)
    s.addr.last
  end

  def start_master
    @logger.info "starting master: #{@mesos_master} #{@mesos_master_args.join(' ')}"
    Thread.new {
      Open3.popen2e(@mesos_master, *@mesos_master_args) do |stdin, stdout_stderr, wait_thr|
        Thread.new {
          stdout_stderr.each do |line|
            puts line
          end
        }
        stdin.close
        at_exit do
          begin
            Process.kill("TERM", wait_thr.pid)
          rescue Errno::ESRCH => e
          end
        end
        wait_thr.join
      end
    }
  end

  def start_slave(master_info)
    @logger.info "starting slave: #{@mesos_slave} --master=#{master_info[:host]}:#{master_info[:port]} #{@mesos_slave_args.join(' ')}"
    Thread.new {
      Open3.popen2e(@mesos_slave, "--master=#{master_info[:host]}:#{master_info[:port]}", *@mesos_slave_args) do |stdin, stdout_stderr, wait_thr|
        Thread.new {
          stdout_stderr.each do |line|
            puts line
          end
        }
        stdin.close
        at_exit do
          begin
            Process.kill("TERM", wait_thr.pid)
          rescue Errno::ESRCH => e
          end
        end
        wait_thr.join
      end
    }
  end
end

class MesosMulticastMessage
  attr_reader :client_id, :token, :content

  def self.inflate(yaml)
    attributes = YAML.load(yaml)
    new(attributes)
  end

  def initialize(attributes={}, logger = Logger.new(STDOUT))
    @client_id = attributes[:client_id]
    @token = attributes[:token]
    @content = attributes[:content]
    @logger = logger
  end

  def to_yaml
    { client_id: client_id, token: token, content: content }.to_yaml
  end
end

class MesosMulticastClient
  MULTICAST_ADDR = "224.178.226.115"
  BIND_ADDR = "0.0.0.0"
  PORT = 20097

  attr_reader :token

  def initialize(token, logger = Logger.new(STDOUT))
    @token     = token
    @client_id = SecureRandom.hex(5)
    @listeners = []
    @logger = logger
  end

  def add_message_listener(listener)
    listen unless listening?
    @listeners << listener
  end

  def transmit(content)
    message = MesosMulticastMessage.new(
      client_id: @client_id,
      token:     @token,
      content:   content
    )
    socket.send(message.to_yaml, 0, MULTICAST_ADDR, PORT)
    message
  end

  private

  def listen
    socket.bind(BIND_ADDR, PORT)

    Thread.new {
      loop do
        attributes, _ = socket.recvfrom(1024)
        message = MesosMulticastMessage.inflate(attributes)
        if message.client_id != @client_id && message.token == @token
          @listeners.each { |listener| listener.new_message(message) }
        end
      end
    }

    @listening = true
  end

  def listening?
    @listening == true
  end

  def socket
    @socket ||= UDPSocket.open.tap do |socket|
      socket.setsockopt(:IPPROTO_IP, :IP_ADD_MEMBERSHIP, bind_address)
      socket.setsockopt(:IPPROTO_IP, :IP_MULTICAST_TTL, 1)
      socket.setsockopt(:SOL_SOCKET, :SO_REUSEPORT, 1)
    end
  end

  def bind_address
    IPAddr.new(MULTICAST_ADDR).hton + IPAddr.new(BIND_ADDR).hton
  end
end

class HttpRedirectServer
  def initialize(master_info, logger, ip = '0.0.0.0', port = 5050)
    @master_info, @ip, @port, @logger = master_info, ip, port, logger
  end

  def start()
    Thread.new {
      if @ip == @master_info[:host]
        @logger.info "master seems to be running on the same host as slave - not starting redirect server"
      else
        @logger.info "listening for http requests on http://#{@ip}:#{@port}/ - redirecting to http://#{@master_info[:host]}:#{@master_info[:port]}/"
        begin
          server = TCPServer.new(@ip, @port)
          loop do
            begin
              socket = server.accept
              request = socket.gets
              @logger.info "received HTTP request: #{request}"

              response = "<html><head><meta http-equiv='Refresh' content='0; url=http://#{@master_info[:host]}:#{@master_info[:port]}/' /></head><body><p>Please follow <a href='http://#{@master_info[:host]}:#{@master_info[:port]}/'>this link</a>.</p></body></html>\n"
              socket.print "HTTP/1.1 302 Found\r\n" +
                "Location: http://#{@master_info[:host]}:#{@master_info[:port]}/\r\n" +
                "Content-Type: text/html\r\n" +
                "Content-Length: #{response.bytesize}\r\n" +
                "Connection: close\r\n"
              socket.print "\r\n"
              socket.print response
              socket.close
            rescue => e
              # we don't really care if the redirect server runs or not
              # the master might run on the same host as the slave and
              @logger.info "caught exception in redirect server: #{e}"
            end
          end
        rescue Errno::EADDRINUSE => e
          @logger.info "can't bind to tcp/#{@ip}:#{@port} - looks like a master is already running on this host"
        end
      end
    }
  end
end

class MesosZeroConf
  def initialize(client, mesos, logger = Logger.new(STDOUT))
    @client = client
    @mesos = mesos
    @found_server = Event.new
    @server = nil
    @port = nil
    @logger = logger
  end

  def start
    @mesos.setup
    @client.add_message_listener(self)

    @logger.info "looking for master of mesos cluster #{@client.token}"
    r = Random.new
    timeout = r.rand(5.0) + 5
    begin
      Timeout::timeout(timeout) {
        @found_server.wait
      }
    rescue Timeout::Error => e
    end

    if @host && @port
      @logger.info "found master at #{@host}:#{@port}"
      master_info = {host: @host, port: @port}
      redirect_server = HttpRedirectServer.new(master_info, @logger, @mesos.mesos_master_ip, @mesos.mesos_master_port)
      [
        @mesos.start_slave(master_info),
        redirect_server.start
      ].each {|t| t.join}
    else
      [
        announce_master,
        @mesos.start_master
      ].each {|t| t.join}
    end
  end

  def new_message(message)
    case message.content[:type]
    when :master_info
      @host = message.content[:host]
      @port = message.content[:port]
      @found_server.set
    end
  end

  private

  def announce_master
    Thread.new {
      loop do
        @client.transmit({type: :master_info, host: @mesos.mesos_master_ip, port: @mesos.mesos_master_port})
        sleep 1
      end
    }
  end

end

class Event
  def initialize
    @lock = Mutex.new
    @cond = ConditionVariable.new
    @flag = false
  end

  def set
    @lock.synchronize do
      @flag = true
      @cond.broadcast
   end
  end

  def wait
    @lock.synchronize do
      if not @flag
        @cond.wait(@lock)
      end
    end
  end
end

def shutdown
  puts "shutting down"
  exit
end

# quick and dirty option parsing to get a cluster token if
# defined and pass the rest through to mesos-master/-slave
token = 'default'
args = Array.new(ARGV)
if args.length > 0 && token_arg = args.select{|arg| arg[/^--cluster/]}.first
  token = token_arg[10..-1]
end
mzc = MesosZeroConf.new(MesosMulticastClient.new(token, logger), Mesos.new(args, logger), logger)
mzc.start
